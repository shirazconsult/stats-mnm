# JMS consumers
# #################################
JMX_PORT=1089

# General Application properties 
# #################################
protocolVer=v2
# How long a failed message should be kept by activemq (in millis.)
failed.message.timeToLive=21600000
log.show.stacktrace=true

# Conusmer flow properties
# #################################
# Leave this flag to false. 
auto.start.camel=false
# Defines the max-size of database batch-updates.
aggregator.completion.size=1000
# One second is more than enough
aggregator.completion.timeout=1000
# Each validator-thread handles one event at a time. A prefetch of 300 messages for 
# two concurrent jms-consumers would result in 600 messages. Assuming there are 10
# events per message, this would result to 6000 messages sent to the validators at
# once. Hense a high number of validator threads.
concurrent.validators=100
concurrent.aggregators=5
# Should be the same as the number of concurrent.aggregators. Setting it too high
# may result in DB update-collisions
concurrent.persisters=5
# Which channels we should push events to. For now we only supports db.persister and file.persister
outbound.channels=db.persister,file.persister

# Throttling policy properties
# #################################
# When the heap space reaches this percentage of the total heap space, the incoming message 
# flow will be slowed down drastically. The more cpu-power and larger RAM, the higher the 
# threshold can be set to.
critical.heap.level=0.60
# The incoming message flow will get back to normal, when the heap space comes over
# this percentage of the total heap space. The more cpu-power and larger RAM, the higher 
# the safe level can be set to. The safe-level should not be too close to the critical level.
safe.heap.level=0.40
# The aggregator accepts up to this number of messages per second.
max.messages.per.second=200
# The throtteler checks the heap space with this rate (in milliseconds) 
inbound.throttler.period=7000

# Validation properties
# #################################
# Max event duration is 24 hours
event.duration.max=86400000
# minimun event duration is 10 seconds
event.duration.min=10000
# Event time should not be more than 5 days old
valid.event.time=5
# Valid values are DAYS, HOURS, MINUTES and SECONDS
valid.event.time.unit=DAYS
# Only run validators with RELAXED severity. STRICT would mean 
# that all validators regardless of their severity should be ran.
validation.severity=RELAXED

# Redelivery policy for timeout exchanges
# #################################
# Max retries before giving up
exchange.timeout.redelivery.max=3
# First delay before retry
exchange.timeout.redelivery.delay=7000
# If true then wait previous-delay*backOffMultiplier before next retry
exchange.timeout.redelivery.useExpBackOff=true
# previous-delay*backOffMultiplier tells next retry interval 
exchange.timeout.redelivery.backOffMultiplier=2

